{
  "_args": [
    [
      {
        "raw": "socket.io-emitter",
        "scope": null,
        "escapedName": "socket.io-emitter",
        "name": "socket.io-emitter",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/roman/Desktop/csv-import/server-side"
    ]
  ],
  "_from": "socket.io-emitter@latest",
  "_id": "socket.io-emitter@3.1.1",
  "_inCache": true,
  "_location": "/socket.io-emitter",
  "_nodeVersion": "6.10.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/socket.io-emitter-3.1.1.tgz_1507788190996_0.21149072237312794"
  },
  "_npmUser": {
    "name": "darrachequesne",
    "email": "damien.arrachequesne@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "component-emitter": "1.2.1",
    "has-binary2": "1.0.2",
    "ms": "2.0.0"
  },
  "_requested": {
    "raw": "socket.io-emitter",
    "scope": null,
    "escapedName": "socket.io-emitter",
    "name": "socket.io-emitter",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/socket.io-emitter/-/socket.io-emitter-3.1.1.tgz",
  "_shasum": "b05f82006e69bc3eb7428794cac3bbcd4baa0cc7",
  "_shrinkwrap": null,
  "_spec": "socket.io-emitter",
  "_where": "/home/roman/Desktop/csv-import/server-side",
  "bugs": {
    "url": "https://github.com/socketio/socket.io-emitter/issues"
  },
  "dependencies": {
    "debug": "~3.1.0",
    "notepack.io": "~2.1.0",
    "redis": "2.6.3",
    "socket.io-parser": "3.1.2"
  },
  "description": "[![Build Status](https://travis-ci.org/socketio/socket.io-emitter.svg?branch=master)](https://travis-ci.org/socketio/socket.io-emitter) [![NPM version](https://badge.fury.io/js/socket.io-emitter.svg)](http://badge.fury.io/js/socket.io-emitter)",
  "devDependencies": {
    "expect.js": "~0.3.1",
    "mocha": "~3.2.0",
    "socket.io": "~2.0.1",
    "socket.io-client": "~2.0.1",
    "socket.io-redis": "^5.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "b05f82006e69bc3eb7428794cac3bbcd4baa0cc7",
    "tarball": "https://registry.npmjs.org/socket.io-emitter/-/socket.io-emitter-3.1.1.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "51cf5638fff683bf5270becc4fa2cfde768db71c",
  "homepage": "https://github.com/socketio/socket.io-emitter#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "darrachequesne",
      "email": "damien.arrachequesne@gmail.com"
    },
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    }
  ],
  "name": "socket.io-emitter",
  "optionalDependencies": {},
  "readme": "\n# socket.io-emitter\n\n[![Build Status](https://travis-ci.org/socketio/socket.io-emitter.svg?branch=master)](https://travis-ci.org/socketio/socket.io-emitter)\n[![NPM version](https://badge.fury.io/js/socket.io-emitter.svg)](http://badge.fury.io/js/socket.io-emitter)\n\n`socket.io-emitter` allows you to communicate with socket.io servers\neasily from non-socket.io processes.\n\n## How to use\n\n```js\nvar io = require('socket.io-emitter')({ host: '127.0.0.1', port: 6379 });\nsetInterval(function(){\n  io.emit('time', new Date);\n}, 5000);\n```\n```js\n// Different constructor options.\n\n//1. Initialize with host:port string\nvar io = require('socket.io-emitter')(\"localhost:6379\")\n// 2. Initlize with host, port object.\nvar io = require('socket.io-emitter')({ host: '127.0.0.1', port: 6379 });\n// 3. Can use other node_redis compatible client eg; ioredis.\n\nvar Redis = require(\"ioredis\");\nvar redis = new Redis();\nvar io = require('socket.io-emitter')(redis);\n\n// Make the emitter works with redis clustered environment.\nvar Cluster = new Redis.Cluster([\n    {\n        host: \"localhost\",\n        port: 6379\n    },\n    {\n        host: \"localhost\",\n        port: 6378\n    },\n]);\nvar io = require('socket.io-emitter')(Cluster);\n\n```\n\n## Examples\n\n```js\n  var io = require('socket.io-emitter')({ host: '127.0.0.1', port: 6379 });\n\n  // sending to all clients\n  io.emit('broadcast', /* ... */);\n\n  // sending to all clients in 'game' room\n  io.to('game').emit('new-game', /* ... */);\n\n  // sending to individual socketid (private message)\n  io.to(<socketid>).emit('private', /* ... */);\n\n  var nsp = io.of('/admin');\n\n  // sending to all clients in 'admin' namespace\n  nsp.emit('namespace', /* ... */);\n\n  // sending to all clients in 'admin' namespace and in 'notifications' room\n  nsp.to('notifications').emit('namespace', /* ... */);\n```\n\n**Note:** acknowledgements are not supported\n\n## Error handling\n\nAccess the `redis` to subscribe to its `error` event:\n\n```js\nvar emitter = require('socket.io-emitter')(\"localhost:6379\");\n\nemitter.redis.on('error', onError);\n\nfunction onError(err){\n  console.log(err);\n}\n```\n\n## API\n\n### Emitter(client[, opts])\n\n`client` is a [node_redis](https://github.com/mranney/node_redis)\ncompatible client that has been initialized with the `return_buffers`\noption set to `true`. This argument is optional.\n\nThe following options are allowed:\n\n- `key`: the name of the key to pub/sub events on as prefix (`socket.io`)\n- `host`: host to connect to redis on (`localhost`)\n- `port`: port to connect to redis on (`6379`)\n- `socket`: unix domain socket to connect to redis on (`\"/tmp/redis.sock\"`)\n\n### Emitter(clientUri[, opts]\n\nSame as above, but `clientUri` is a string of the format `host:port`\nto connect to redis to.\n\n### Emitter(opts)\n\nIf you don't want to supply a redis client object, and want\n`socket.io-emitter` to intiialize one for you, make sure to supply the\n`host` and `port` options.\n\n### Emitter#to(room:String):Emitter\n### Emitter#in(room:String):Emitter\n\nSpecifies a specific `room` that you want to emit to.\n\n\n### Emitter#of(namespace:String):Emitter\n\nSpecifies a specific namespace that you want to emit to.\n\n## License\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/socketio/socket.io-emitter.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "3.1.1"
}
